import os
from snakemake.utils import Paramspace
import pandas as pd
#Settings steady state
Name = 'Budel' #well field Budel, Schijf, Vlijmen
modelname ='Vlen'

Range = 3200 #m Distance from grid border to centre of wells 3200
GHBrange = 5000 #distance of virtual boundar
delr = 800 #size of largest cell at boundaries
refineranges = {1600:1, 800:2, 400:3, 200:4, 100 :5}
startdate = '2016-04-01 00:00:00'         #first is '2014-12-31 00:00:00', 
enddate = '2016-08-01 00:00:00'         #last is '2023-12-30 22:00:00'
warmup = False #Long term spinup
drainC = 1 #drain conductance at surface
DeepestLayer = 'KIz5' #lowest REGIS layer
ss = 0.00001 #starting value of specific storage

#Settings calibration
SensLayers = ['KIz2', 'KIk2','KIz3','KIk3','KIz4','KIz5'] #REGIS layers for calibration
CorLayers = {'KIz4' : 'KIz5'} #REGIS layers that can be combined in calibration
ghbCal = 'SensLayers' # 'obs', 'Single', None #how to calibrate GHB
KCal = True #calibrate K
Weighted = False #weight observations 
BadWells =  ['B57E0081_3','B57E0081_4'] #wells to skip, close to boundary, multiple within aquifer
Lambda = 0.0005 #Tikhonov regularization
methodss = 'NM' #'LM' of 'NM' Levenberg Marquardt or Nelder Mead. NM functions best
methodt = 'NM'  #'LM' of 'NM' 

#
def get_paramspace(xcorlens,zcorlens,fracs):
    """
    Function to create dataframe with possible values for correlation lengths and sand/clay fractions
    Parameters
    ----------
    xcorlens : list
    zcorlens : list
    fracs : list

    Returns
    -------
    pd.DataFrame
        
    """    
    xl = []
    zl = []
    fl = []
    for x in xcorlens:
        for z in zcorlens:
            for f in fracs:
                xl.append(x)
                zl.append(z)
                fl.append(f)
    return pd.DataFrame({'xcorlens': xl,'zcorlens' : zl, 'fracs' : fl})

#Settings conditional simulation
simlayer = 'KIk2' #layer where conditional indicator simulation is performed
xcorlens = [400,500,600,700,800,1000,1200]  # horizontal correlation lengths to simulate
zcorlens = [7.5,10, 12.5] # vertical correlation lengths to simulate
fracs = [-0.05,0,0.05] # clay/sand fraction
CoreCorrection = [0,0.5,1,1.5,2,2.5] #REGIS catalog changes
ens_no = 100 # size of ensemble
dx = 25 #Resolution in x direction
df = get_paramspace(xcorlens,zcorlens, fracs) #get df for values
paramspace = Paramspace(df) #create snakemake Paramspace for wildcards

rule all: 
    input:
        #expand(os.path.join('..' ,'Results',f'{modelname}','KfieldsQC', '{params}','k.csv'), params = paramspace.instance_patterns),
        # expand(os.path.join('..' ,'Results',f'{modelname}','KfieldsQC', '{params}','UpscaledK.nc'),params = paramspace.instance_patterns),
        expand(os.path.join('..' ,'Results',f'{modelname}','KfieldsQC', '{params}','RMSE.csv'),params = paramspace.instance_patterns),
        os.path.join('..' ,'Results',f'{modelname}','RMSE_all.csv'),
        os.path.join('..', 'Results', modelname, 'BestRealizations.nc'),
        os.path.join('..','Results',f'{modelname}','flowfrac.csv'),
        os.path.join('..','Results',f'{modelname}','TT_dist.csv')

#Create steady state model
rule Forward_Model_SS:
    input:
        'ForwardModelGen.py',
        os.path.join('functions', 'Helper.py')
    output:
        os.path.join('..','Results',modelname, f'{modelname}_ss',f'{modelname}_ss.hds'),
        directory(os.path.join('..','Results',modelname, f'{modelname}_ss')),
        os.path.join('..','Results',f'{modelname}', f'{modelname}_ss',f'{modelname}_ss.nc'),
    params:
        Name = Name,
        modelname = modelname,
        Range = Range,
        GHBrange = GHBrange,
        delr = delr,
        refineranges = refineranges,
        steady_state = True,
        startdate = startdate,
        enddate = enddate,
        warmup = warmup,
        drainC = drainC,
        DeepestLayer = DeepestLayer,
        ss = ss,
    script:
       'ForwardModelGen.py'

#Create transient model 
rule Forward_Model_T:
    input:
        'ForwardModelGen.py',
        os.path.join('functions', 'Helper.py')
    output:
        os.path.join('..','Results',modelname, f'{modelname}_t',f'{modelname}_t.nam'),
        os.path.join('..','Results',f'{modelname}', f'{modelname}_t',f'{modelname}_t.nc'),
        os.path.join('..','Results',f'{modelname}',f'{modelname}_t', 'layer_model.nc'),
    params:
        Name = Name ,
        modelname = modelname,
        Range = Range,
        GHBrange = GHBrange,
        delr = delr,
        refineranges = refineranges,
        steady_state = False,
        startdate = startdate,
        enddate = enddate,
        warmup = warmup,
        drainC = drainC,
        DeepestLayer = DeepestLayer,
        ss = ss,
    script:
       'ForwardModelGen.py'
#Calibrate steady state model
rule Calibration_SS:
    input:
       os.path.join('..','Results',modelname, f'{modelname}_ss',f'{modelname}_ss.hds'),
       'Calibration_ss.py',
       os.path.join('functions', 'OptimisationFuncs.py')
    params:
        Name = Name,
        modelname = modelname,
        SensLayers = SensLayers,
        CorLayers = CorLayers,
        ghbCal = ghbCal,
        KCal = KCal,
        Weighted = Weighted,
        BadWells = BadWells,
        Lambda = Lambda,
        method = methodss
    output:
       os.path.join('..','Results',f'{modelname}',f'ObsForCalibration_{modelname}_SS.csv'),
       os.path.join('..','Results',f'{modelname}',f'BestParams_SS_{modelname}.csv'),
    script:
       'Calibration_ss.py'

#Calibrate transient model using output from steady state calibration
rule Calibration_T:
    input:
       'Calibration_t.py',
       os.path.join('..','Results',f'{modelname}',f'BestParams_SS_{modelname}.csv'),
       os.path.join('..','Results',modelname, f'{modelname}_t',f'{modelname}_t.nam'),
       os.path.join('functions', 'OptimisationFuncs.py')
    params:
        Name = Name,
        modelname = modelname,
        CorLayers = CorLayers,
        method = methodt
    output:
        os.path.join('..','Results',f'{modelname}',f'BestParams_t_{modelname}.csv'),
        os.path.join('..','Results',f'{modelname}',f'ModHead_{modelname}.csv'),
        os.path.join('..','Results',f'{modelname}',f'Residuals_{modelname}.csv'),
        os.path.join('..','Results',modelname, f'{modelname}_t','Fitter',f'{modelname}_t.nam')
    script:
       'Calibration_t.py'

#Create object based on Dinoloket borehole data   
rule Prep_Boreholes:
    input:
        'prep_boringen.py',
        os.path.join('..','Results',f'{modelname}',f'{modelname}_t', 'layer_model.nc'),
        os.path.join('functions', 'Heterogeniteit.py')
    params:
        modelname = modelname,
        Name = Name,
        simlayer = simlayer
    output:
        os.path.join('..','Results',f'{modelname}','boreholeindicators.pkl')
    script:
        'prep_boringen.py'

#Add modflow grid cellids to conditional simulation grid output list for easier mapping in the upscaling phase
rule Add_Cellids:
    input:
        'add_cellids.py',
        os.path.join('..','Results',f'{modelname}', f'{modelname}_t',f'{modelname}_t.nc'),
    params:
        modelname = modelname,
        dx = dx
    output:
        os.path.join('..','Results',f'{modelname}','cellids.csv')
    script:
        'add_cellids.py'

#conditional simulations
rule Cond_Simulator:
    input:
        'condsim.py',
        os.path.join('..','Results',f'{modelname}', f'{modelname}_t',f'{modelname}_t.nc'),
        os.path.join('..','Results',f'{modelname}','boreholeindicators.pkl'),
        os.path.join('functions', 'Heterogeniteit.py')
    params:
        Name = Name,
        modelname = modelname,
        simlayer = simlayer,
        simulation = paramspace.instance,
        ens_no = ens_no,
        dx = dx,
        cc = CoreCorrection
    output:
        os.path.join('..' ,'Results',f'{modelname}','KfieldsQC', f'{paramspace.wildcard_pattern}','k.h5'),
    script:
       'condsim.py'

#Upscale conditonal sims to modflow grid
rule Upscaler:
    input:
        'Upscaler.py',
        os.path.join('..' ,'Results',f'{modelname}','KfieldsQC', f'{paramspace.wildcard_pattern}','k.h5'),
        os.path.join('..','Results',f'{modelname}','cellids.csv'),
        os.path.join('functions', 'Upscale_funcs.py')
    params:
        Name = Name,
        modelname = modelname,
        simlayer = simlayer,
        ens_no = ens_no,
        dx = dx,
        ws = os.path.join('..' ,'Results',f'{modelname}','KfieldsQC', f'{paramspace.wildcard_pattern}','Upscaler'),
        cc = CoreCorrection
    output:
        os.path.join('..' ,'Results',f'{modelname}','KfieldsQC', f'{paramspace.wildcard_pattern}','UpscaledK.nc'),
    script:
       'Upscaler.py'

#Run upscaled realizations in calibrated transient model
rule Runner:
    input:
       'Runner.py',
       os.path.join('..' ,'Results',f'{modelname}','KfieldsQC', f'{paramspace.wildcard_pattern}','UpscaledK.nc'),
       os.path.join('..','Results',modelname, f'{modelname}_t','Fitter',f'{modelname}_t.nam')
    params:
        modelname = modelname,
        simlayer = simlayer,
        ens_no = ens_no,
        ws = os.path.join('..' ,'Results',f'{modelname}','KfieldsQC', f'{paramspace.wildcard_pattern}','Runner'),
        simulation = paramspace.instance,
        cc = CoreCorrection
    output:
        os.path.join('..' ,'Results',f'{modelname}','KfieldsQC', f'{paramspace.wildcard_pattern}','RMSE.csv'),
    script:
       'Runner.py'

#Collect all runner results in the different wildcard folders in one file per folder
rule Collector:
    input:
        expand(os.path.join('..' ,'Results',f'{modelname}','KfieldsQC', '{params}','RMSE.csv'),params = paramspace.instance_patterns),
    output:
        os.path.join('..' ,'Results',f'{modelname}','RMSE_all.csv')
    shell:
        "cat {input} > {output}"

#Merge results of realizations that fit best on heads
rule Merge_Best:
    input:
       'MergeBest.py',
       os.path.join('..' ,'Results',f'{modelname}','RMSE_all.csv'),
       os.path.join('..','Results',f'{modelname}',f'Residuals_{modelname}.csv'),
    params:
        modelname = modelname,
    output:
        os.path.join('..', 'Results', modelname, 'BestRealizations.nc')
    script:
       'MergeBest.py'

#run Modpath simulations on good fitting realizations
rule Modpath:
    input:
       'modpath.py',
       os.path.join('functions', 'ModpathFuncs.py'),
       os.path.join('..', 'Results', modelname, 'BestRealizations.nc')
    params:
        modelname = modelname,
        layer = simlayer,
        name = Name
    output:
        os.path.join('..','Results',f'{modelname}','flowfrac.csv'),
        os.path.join('..','Results',f'{modelname}','TT_dist.csv')
    script:
       'modpath.py'
